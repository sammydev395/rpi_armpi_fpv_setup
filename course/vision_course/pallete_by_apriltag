#!/usr/bin/python3
# coding=utf8
# 第13章 ArmPi FPV创意玩法课程\1.AI视觉创意玩法\第6课 手势识别堆积木(13. ArmPi FPV creative application course\1. AI vision creative programs\Lesson 6 gesture-guided goods stacking)
import cv2
import math
import time
import threading
import numpy as np
from common import apriltag
from common.ros_robot_controller_sdk import Board
from kinematics.kinematics_controller import KinematicsController

board = Board()
controller = KinematicsController(board)
board.bus_servo_set_position(0.5, [[1, 200]])
controller.go_pose_target([0.12, 0, 0.05], 90, [-90, 90], 0, 1)
time.sleep(1)

# 检测apriltag(detect apriltag)
detector = apriltag.Detector(searchpath=apriltag._get_demo_searchpath())
def apriltagDetect(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    detections = detector.detect(gray, return_image=False)

    if len(detections) != 0:
        for detection in detections:                       
            corners = np.rint(detection.corners)  # 获取四个角点(obtain four angular points)
            cv2.drawContours(img, [np.array(corners, np.int)], -1, (0, 255, 255), 2)

            tag_family = str(detection.tag_family, encoding='utf-8')  # 获取tag_family(get tag_family)
            tag_id = int(detection.tag_id)  # 获取tag_id(get tag_id)

            x, y = int(detection.center[0]), int(detection.center[1])  # 中心点(center point)
            
            angle = int(math.degrees(math.atan2(corners[1][1] - corners[0][1], corners[1][0] - corners[0][0])))  # 计算旋转角(calculate rotation angle)
            cv2.circle(img, (int(corners[0][0]), int(corners[0][1])), 5, (0, 255, 255), -1) 
            cv2.circle(img, (int(corners[1][0]), int(corners[1][1])), 5, (255, 255, 0), -1)
            return tag_family, tag_id, x, y, angle
            
    return None, None, None, None, None

def getAngle(x, y, angle):
    theta6 = round(math.degrees(math.atan2(abs(x), abs(y))), 1)
    angle = abs(angle)
    
    if x < 0:
        if y < 0:
            angle1 = -(90 + theta6 - angle)
        else:
            angle1 = theta6 - angle
    else:
        if y < 0:
            angle1 = theta6 + angle
        else:
            angle1 = 90 - theta6 - angle

    if angle1 > 0:
        angle2 = angle1 - 90
    else:
        angle2 = angle1 + 90

    if abs(angle1) < abs(angle2):
        return angle1
    else:
        return angle2

init_x, init_y, init_z = 0.12, 0, 0.05
start_pick_up = False
block_angle = 0
def move():
    global init_x, init_y, init_z
    global start_pick_up, block_angle
    
    num = 0
    while True:
        if start_pick_up:
            board.set_buzzer(1900, 0.1, 0.9, 1)# 设置蜂鸣器响0.1秒(set the buzzer to emit for 0.1 second)
            time.sleep(1)
            angle = int(block_angle % 90) #读取物块的偏转角(read the deviation angle of the object)
            init_x += 0.01
            controller.go_pose_target([init_x, init_y, init_z], 90, [-90, 90], angle, 0.5)
            time.sleep(0.5)
            # 机械臂进行夹取(robotic arm grasping)
            controller.go_pose_target([init_x, init_y, 0.01], 90, [-90, 90], angle, 0.5)
            time.sleep(0.5)
            board.bus_servo_set_position(0.5, [[1, 500]])
            time.sleep(0.5)
            # 夹取后，抬起(after grasping, lift up)
            controller.go_pose_target([init_x, init_y, 0.1], 90, [-90, 90], 0, 1.5)
            time.sleep(1.5)
            controller.go_pose_target([0, 0.12, 0.1], 90, [-90, 90], 0, 1.5)
            time.sleep(1.5)
            # 移动到放置位置上方(move to the top of placement position)
            controller.go_pose_target([0, 0.12, 0.02 + 0.03*num], 90, [-90, 90], 0, 1.5)
            time.sleep(1.5)
            # 调整放置角度(adjust placement angle)
            board.bus_servo_set_position(0.5, [[2, 500]])
            time.sleep(0.5)
            # 放置物块(place object)
            controller.go_pose_target([0, 0.12, 0.01 + 0.03*num], 90, [-90, 90], 0, 1)
            time.sleep(1)
            board.bus_servo_set_position(0.5, [[1, 200]])
            time.sleep(0.5)
            # 抬起机械臂(lift the robotic arm)
            controller.go_pose_target([0, 0.12, 0.1], 90, [-90, 90], 0, 1)
            time.sleep(1)
            # 回到检测的位置(return to the detected position)
            controller.go_pose_target([0.12, 0, 0.05], 90, [-90, 90], 0, 1)
            time.sleep(1)
            # 码垛高度调整(stacking height adjustment)
            num += 1
            num = 0 if num > 2 else num
            init_x, init_y, init_z = 0.12, 0, 0.05
            start_pick_up = False
        else:
            time.sleep(0.01)
    
# 运行子线程(run sub threat)
th = threading.Thread(target=move)
th.setDaemon(True)
th.start()

def run(img):
    global init_x, init_y, init_z
    global start_pick_up, block_angle

    tag_family, tag_id, x, y, angle = apriltagDetect(img) # apriltag检测(apriltag detection)
    
    if tag_id is not None and not start_pick_up:
        if y < 345:
            init_x += 0.001
            st1 = False
        elif y > 365:
            init_x -= 0.001
            st1 = False
        else:
            st1 = True
        if x < 300:
            init_y += 0.001
            st2 = False
        elif x > 320:
            init_y -= 0.001
            st2 = False
        else:
            st2 = True
        if st1 and st2:
            start_pick_up = True
            block_angle = angle
        controller.go_pose_target([init_x, init_y, init_z], 90, [-90, 90], 0, 0.05)
        time.sleep(0.05)
        cv2.putText(img, "({}, {}, {})".format(x, y, angle), (x - int((1 + len(str(x)) + len(str(y)) + len(str(angle)))*9), y - 15), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 255, 255), 2)
        cv2.putText(img, "tag_id: " + str(tag_id), (10, img.shape[0] - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.65, [0, 255, 255], 2)
        cv2.putText(img, "tag_family: " + tag_family, (10, img.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.65, [0, 255, 255], 2)
    else:
        cv2.putText(img, "tag_id: None", (10, img.shape[0] - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.65, [0, 255, 255], 2)
        cv2.putText(img, "tag_family: None", (10, img.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.65, [0, 255, 255], 2)
    cv2.circle(img, (320, 240), 5, (0, 255, 255), -1) 
    return img

if __name__ == '__main__':
    cap = cv2.VideoCapture(-1) #读取摄像头(read camera)
    while True:
        ret, img = cap.read()
        if ret:
            frame = run(img)           
            cv2.imshow('frame', frame)
            key = cv2.waitKey(1)
            if key == 27:
                break
        else:
            time.sleep(0.01)
    cap.release()
    cv2.destroyAllWindows()
